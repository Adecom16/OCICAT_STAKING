"use client"
import { useState } from "react";
import { useLiquidityStaking } from "../web3/useLiquidityStaking";
import { useOcicatStaking } from "../web3/useOcicatStaking";
import { useAccount } from "wagmi";

const StakingInterface = () => {
  const { address, isConnected } = useAccount();
  const liquidityStaking = useLiquidityStaking();
  const ocicatStaking = useOcicatStaking();

  const [amount, setAmount] = useState<number>(0);
  const [selectedStaking, setSelectedStaking] = useState<"liquidity" | "ocicat">("liquidity");

  const handleStake = async () => {
    if (selectedStaking === "liquidity") {
      await liquidityStaking.stake(amount);
    } else {
      await ocicatStaking.stake(amount);
    }
  };

  const handleUnstake = async () => {
    if (selectedStaking === "liquidity") {
      await liquidityStaking.unstake(amount);
    } else {
      await ocicatStaking.unstake(amount);
    }
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial", maxWidth: "500px", margin: "auto" }}>
      <h2>Staking Interface</h2>
      <p>Connected Wallet: {isConnected ? address : "Not connected"}</p>
      
      <label>
        Select Staking Type:
        <select value={selectedStaking} onChange={(e) => setSelectedStaking(e.target.value as any)}>
          <option value="liquidity">Liquidity Staking</option>
          <option value="ocicat">Ocicat Staking</option>
        </select>
      </label>
      
      <div style={{ marginTop: "10px" }}>
        <label>
          Amount: <input type="text" value={amount} onChange={(e) => setAmount(Number(e.target.value))} />
        </label>
      </div>
      
      <button onClick={handleStake} style={{ marginTop: "10px", marginRight: "10px" }}>Stake</button>
      <button onClick={handleUnstake} style={{ marginTop: "10px" }}>Unstake</button>
      
      <h3>Staking Details ({selectedStaking === "liquidity" ? "Liquidity Staking" : "Ocicat Staking"})</h3>
      <p>Stake Amount: {selectedStaking === "liquidity" ? liquidityStaking.stakeAmountQuery.data?.toString() : ocicatStaking.stakeAmount?.toString()}</p>
      <p>DAO Power: {selectedStaking === "liquidity" ? liquidityStaking.daoPowerQuery.data?.toString() : ocicatStaking.daoPower?.toString()}</p>
      <p>Reward Rate: {selectedStaking === "liquidity" ? liquidityStaking.rewardRateQuery.data?.toString() : ocicatStaking.rewardRate?.toString()}</p>
    </div>
  );
};

export default StakingInterface;
